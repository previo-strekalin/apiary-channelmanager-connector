FORMAT: 1A
HOST: http://chm.previo.cz/api


# CHM connector

API for communication between Previo PMS and CHM app.

## Price Actions Collection [/price-actions{?hotelId}{?partnerId}]
+ Parameters
    + hotelId: 123 (integer) - ID of the hotel
    + partnerId: 1262 (integer) - ID of the partner (OTA)
    
### Update price discounts (Lastminute, Longterm, etc.) [PUT]
+ Request (application/json)

    + Headers
    
            Chm-Login: Username or client Id
            Chm-Secret: Encrypted password or secret Id
            Chm-Token: Encrypted refresh token

    + Attributes (array[PriceActionRequest])
    
+ Response 200 (application/json)

    + Attributes (SuccessResponseBoolean)

+ Response 500 (application/json)

    + Attributes (ErrorResponseBoolean)

## Room kind Collection [/room{?hotelId}{?partnerId}]
+ Parameters
    + hotelId: 123 (integer) - ID of the hotel
    + partnerId: 1262 (integer) - ID of the partner (OTA)
    
### Get list of rooms available on OTA [GET]
+ Request (application/json)

    + Headers
    
            Chm-Login: Username or client Id
            Chm-Secret: Encrypted password or secret Id
            Chm-Token: Encrypted refresh token

    
+ Response 200 (application/json)

    + Attributes
        + result (array[RoomTypeResponse])
        + errors (array)

+ Response 500 (application/json)

    + Attributes (ErrorResponseArray)
    

## Rate plan Collection [/rate-plan{?hotelId}{?partnerId}]
+ Parameters
    + hotelId: 123 (integer) - ID of the hotel
    + partnerId: 1262 (integer) - ID of the partner (OTA)

### Get list of rate plans available on OTA [GET]
+ Request (application/json)

    + Headers
    
            Chm-Login: Username or client Id
            Chm-Secret: Encrypted password or secret Id
            Chm-Token: Encrypted refresh token

    
+ Response 200 (application/json)

    + Attributes
        + result (array[RatePlanResponse])
        + errors (array)

+ Response 500 (application/json)

    + Attributes (ErrorResponseArray)


## Rabbit MQ Reservation [/]
This is not real API endpoint. This is just description what is the Reservation message structure exchanged between Channel manager app and Previo Rabbit MQ queue.

### Reservation [POST]

+ Request (application/json)
    + Attributes (ReservationRequest)

    
+ Response 200 (application/json)

    + Attributes
        + result (array[RatePlanResponse])
        + errors (array)

+ Response 500 (application/json)

    + Attributes (ErrorResponseArray)

## Reservation [/reservation-details{?hotelId}{?partnerId}{?reservationId}]
Pull the reservation from OTA

+ Parameters
    + hotelId: 123 (integer) - ID of the hotel
    + partnerId: 1262 (integer) - ID of the partner (OTA)
    + reservationId: 1262332 (string) - ID of the reservation


### Reservation [GET]

+ Request (application/json)
    + Attributes (ReservationRequest)

    
+ Response 200 (application/json)

    + Attributes
        + result (array[ReservationRequest])
        + errors (array)

+ Response 500 (application/json)

    + Attributes (ErrorResponseArray)
    

## Credit Card [/credit-cards]
API for working with credit cards stored in AWS server

Error Codes:
| Code | Description                                         | Source       |
|------|-----------------------------------------------------|--------------|
| 1001 | Credit Card not found.                              | Elastic      |
| 1002 | Cannot transform response.                          | Elastic      |
| 1003 | Cannot provide request.                             | Elastic      |
| 1004 | Credit Card is Locked.                              | Elastic      |
| 2001 | You don’t have permission to access on this Server. | Firewall     |
| 2002 | Your Request is invalid.                            | Firewall     |
| 3001 | header (name) must be set.                          | Headers      |
| 3002 | Invalid (name) length.                              | Headers      |
| 4001 | Decryption failed.                                  | Cryptography |
| 4002 | Encryption failed.                                  | Cryptography |
| 4003 | Cannot read key.                                    | Cryptography |
| 4004 | Cannot scan keys directory.                         | Cryptography |
| 5001 | Invalid Credit Card Number.                         | Validation   |
| 5002 | Credit Card is expired.                             | Validation   |
| 5003 | Expiration should be in 'm/Y' format.               | Validation   |
| 5004 | Invalid cvv format.                                 | Validation   |

### Store the card [POST]
+ Request (application/json)
    
    + Attributes
        + card (object)
            + number: `1234567890111111` (string)
            + holder: `John Doe` (string)
            + cvv: `123` (string)
            + expiration: `12/20` (string) - format m/y
        + ota: `Booking.com` (string, optional) - source of the reservation
        + departure: `2020-05-18` (string, optional) - format Y-m-d

        
    
+ Response 200 (application/json)

    + Attributes
        + token: `48656c6c6f20576f726c646448656c6c6f20576f726c646448656c6c6f20576f726c646448656c6c6f20576f726c646448656c6c6f20576f726c6464sd2a2df7` (string) - token with length of 128

+ Response 400 (application/json)

    + Attributes
        + error (enum[string]) - Error response
            + Members
                + `Bad Request Body.`
                + `Bad Credit Card Number.`
                + `Credit Card is expired.`
                + `Expiration should be in 'm/y' format.`
                + `Bad cvv format.`
        + code: 5004 (number, optional)

+ Response 500 (application/json)

    + Attributes
        + error: `Other Error.` (string)
        + code: 5004 (number, optional)
        

### Unlock the card [PATCH]
Before getting the card details, there must be API call that unlock the credit card. This call have to go from Previo servers (there is an IP firewall).
+ Request (application/json)

    + Headers
    
            Chm-Token-Cc: Credit card token (string)
    
+ Response 200 (application/json)

    + Body

            { "OK" }


+ Response 400 (application/json)

    + Attributes
        + error (enum[string]) - Error response
            + Members
                + `header Chm-Token-Cc must be set.`
                + `bad token length.`
        + code: 5004 (number, optional)

+ Response 500 (application/json)

    + Attributes
        + error: `Other Error.` (string)
        + code: 5004 (number, optional)

+ Response 403 (application/json)

    + Attributes
        + error: `You don’t have permission to access on this Server.` (string)
        + code: 5004 (number, optional)

+ Response 404 (application/json)

    + Attributes
        + error: `Credit Card not found.` (string)
        + code: 5004 (number, optional)
        

### Get the card [GET]
This API call has to made from Javascript to be PCI DSS compliant 
+ Request (application/json)

    + Headers
    
            Chm-Token-Cc: Credit card token (string)
    
+ Response 200 (application/json)

    + Attributes
        + card (object)
            + number: `1234567890111111` (string)
            + holder: `John Doe` (string)
            + cvv: `123` (string)
            + expiration: `12/20` (string) - format m/y
        + partner: `Booking.com` (string, optional) - source of the reservation
        + departure: `2020-05-18` (string, optional) - format Y-m-d
        + created: `2020-05-18T15:55:26` (string, optional) - format Y-m-d\TH:i:s

+ Response 400 (application/json)

    + Attributes
        + error (enum[string]) - Error response
            + Members
                + `header Chm-Token-Cc must be set.`
                + `bad token length.`
        + code: 5004 (number, optional)

+ Response 500 (application/json)

    + Attributes
        + error: `Other Error.` (string)
        + code: 5004 (number, optional)

+ Response 404 (application/json)

    + Attributes
        + error (enum[string]) - Error response
            + Members
                + `Credit Card not found.`
                + `Credit Card is Locked.GET credit card`
        + code: 5004 (number, optional)
        

### Delete the card [DELETE]
This call have to go from Previo servers (there is an IP firewall).
+ Request (application/json)

    + Headers
    
            Chm-Token-Cc: Credit card token (string)
    
+ Response 200 (application/json)

    + Body

            { "OK" }


+ Response 400 (application/json)

    + Attributes
        + error (enum[string]) - Error response
            + Members
                + `header Chm-Token-Cc must be set.`
                + `bad token length.`
        + code: 5004 (number, optional)

+ Response 500 (application/json)

    + Attributes
        + error: `Other Error.` (string)
        + code: 5004 (number, optional)

+ Response 403 (application/json)

    + Attributes
        + error: `You don’t have permission to access on this Server.` (string)
        + code: 5004 (number, optional)

+ Response 404 (application/json)

    + Attributes
        + error: `Credit Card not found.` (string)
        + code: 5004 (number, optional)
        

## Data Structure

## ReservationRequest
+ reservationId: `99555BA` (string, required) - Unique ID of the reservation
+ hotelId: 3 (number, required) - Id of the hotel
+ partnerId: 1262 (number, required) - Previo partner ID
+ status: `new` (enum[string], required) - Reservation status
    + Members
        + `new`
        + `modified`
        + `cancelled`
+ currency: `EUR` (string, required) - `Currency of the reservation in ISO 4217 format (^([A-Z]{3})$)`
+ created: `2020-01-15T13:56:59` (string, optional) - Format Y-m-d\TH:i:s
+ lastChange: `2020-01-15T13:56:59` (string, optional) - Format Y-m-d\TH:i:s
+ language: `cs` (string, optional) - `Format ^([a-z]{2})$` 
+ totalPrice: 300.3 (number, optional) - Total price of the reservation (float)
+ commissionAmount: 3 (number, optional) - Total commission amount (float)
+ customer (CustomerReservation, required) - Info about the person who book the reservation
+ creditCard (CreditCardReservation, optional) - CreditCard details
+ payment (PaymentReservation, optional) - Info about the person who book the reservation
+ services (ServicesReservation, optional) - Info about the person who book the reservation
+ generalNote: `Some note` (string, optional)
+ extraInfo: `Some note` (string, optional)
+ cancellationPolicy: `Cancellation policy` (string, optional)
+ customerComments: `Comments` (string, optional)
+ rooms (array[RoomReservation], required) - Booked room(s)

## RoomReservation
+ from: `2020-05-05T23:00:59` (string, required) - Format Y-m-d\TH:i:s
+ to: `2020-05-07T23:00:59` (string, required) - Format Y-m-d\TH:i:s
+ roomReservationId: `226` (string, optional) - 
+ roomTypeId: `123456` (string, required) - ID of the booked room type
+ roomTypeName: `Double room` (string, optional) - Name of the booked room type
+ ratePlanId: `123456` (string, required) - ID of the booked rateplan
+ ratePlanName: `Standard Breakfast included` (string, optional) - Name of the booked rateplan
+ guests (array[GuestReservation], required) - Infou about the guests
+ meal: `breakfast` (enum[string], optional) - Meal type
    + Members
        + `not-available`
        + `none`
        + `breakfast`
        + `lunch`
        + `dinner`
        + `half-board`
        + `full-board`
        + `all-inclusive`
        + `other`
+ currency: `EUR` (string, required) - `Currency of the reservation in ISO 4217 format (^([A-Z]{3})$)`
+ totalPrice: 300.3 (number, optional) - Total price of the room (float)
+ commissionAmout: 30.3 (number, optional) - Commission amount
+ taxPrice: 6.3 (number, optional) - 
+ dailyPrices (array[DailyPricesReservation], required) - Infou about the guests
+ addOns (array[AddOnsReservation], required) - Infou about the guests
+ smoking (boolean, optional)
+ facilities (array, optional)
+ info: `Comments` (string, optional)
+ extraInfo: `Comments` (string, optional)
+ remarks: `Comments` (string, optional)

## GuestReservation
+ firstName: `John` (string, required) - 
+ lastName: `Doe` (string, required) - 
+ child: `false` (boolean, optional) - 
+ age: 26 (number, optional) - 

## DailyPricesReservation
+ date: `2020-05-07T23:00:59` (string, required) - Format Y-m-d\TH:i:s
+ price: `36.6` (number, required) - 
+ ratePlanId: `55` (string, optional) - 
+ ratePlanName: `Standard` (string, optional) - 
+ note (string, optional) - 


## AddOnsReservation
+ name: `Breakfast` (string, required) - 
+ pricing: `per-night` (enum[string], required) - Picing method
    + Members
        + `per-night`
        + `per-night-and-person`
        + `once`
        + `once-per-person`
+ pricePerUnit: `35.9` (number, required) - 
+ nights: 2 (number, optional) - 
+ persons: 1 (number, optional) - 
+ totalPrice: `71.8` (number, optional) - 

## PaymentReservation
+ type: `cash` (enum[string], required) - Payment method
    + Members
        + `cc`
        + `transfer`
        + `cash`
        + `ota`
        + `na`
+ amount: 150.7 (number, required)
+ currency: `EUR` (string, required) - `Currency of the payment in ISO 4217 format (^([A-Z]{3})$)`


## ServicesReservation
+ name: `Extra breakfast` (string, required)
+ price: 150.7 (number, required)
+ serviceId: 55 (string, optional)
+ currency: `EUR` (string, required) - `Currency of the service in ISO 4217 format (^([A-Z]{3})$)`


## CreditCardReservation
+ token: `dsf456asdf489cxy7b9xyc456csad214g3adg456dsa1fsa36d325dsf` (string, required)

## CustomerReservation
+ firstName: `John` (string, required)
+ lastName: `Doe` (string, required)
+ email: `john@doe.com` (string, required)
+ phone: `+0033456666` (string, optional)
+ zip: `11000` (string, optional)
+ country: `cs` (string, optional) - `Format ^([a-z]{2})$`
+ city: `Prague` (string, optional)
+ street: `Downing` (string, optional)
+ company: `AbdComp ltd.` (string, optional)
+ companyVatNumber: `4555666` (string, optional)
+ note: `Booker's note` (string, optional)


## PriceActionRequest
+ id: 99 (number, required) - Price action ID
+ daysThreshold: 3 (number, required) - Number of days
+ priceChange: 15.5 (number, required) - Percentage Discount / Surcharge
+ type: `LastMinute` (enum[string], required) - Price action type
    + Members
        + `LastMinute`
        + `FirstMinute`
        + `LongTerm`
+ sinceDate: `2019-10-11` (string, optional) - Format YYYY-MM-DD
+ endDate: `2020-01-15` (string, optional) - Format YYYY-MM-DD
+ roomIds: 195, 2126 (array[number], required) - List of rooms, where the price action is valid
+ room (object, optional)



## RoomTypeResponse
+ id: `99999A` (string, required) - Room type ID
+ name: 3 (string, required) - Room type name
+ active: true (boolean, required) - Room type is active?
+ defaultAllotment: 2 (number, optional) - Default number of guests in room kind
+ maxAllotment: 4 (number, optional) - Max number of guests in room
+ minNumAdults: 1 (number, optional)
+ maxNumAdults: 2 (number, optional)
+ numChildren: 2 (number, optional)
+ numOfRooms: 99 (number, optional) - How many rooms of this kind is available

## RatePlanResponse
+ id: `89999A` (string, required) - Rateplan ID
+ name: 3 (string, required) - Rateplan name
+ active: true (boolean, required) - Rateplan is active?
+ minStay: 2 (number, optional) - Is there any min stay restriction set for this rateplan?
+ maxStay: 4 (number, optional) - Is there any max stay restriction set for this rateplan?


## ErrorResponseArray
+ result (array, required)
+ errors (array[ErrorResponseType], optional)

## SuccessResponseBoolean
+ result: true (boolean, required) - If the request was successful or not
+ errors (array)

## ErrorResponseBoolean
+ result: false (boolean, required) - If the request was successful or not
+ errors (array[ErrorResponseType], optional)

## ErrorResponseType
+ errorType: `INVALID_REQUEST` (string, optional) - Error type
+ errorText: `Partner with ID 1334 has not been registered in services.` (string, optional) - Error description
+ remoteErrorType: null (string, optional) - Error type on OTA side
+ remoteErrorText: null (string, optional) - Error description on OTA side

## PriceActionTypes
+ FirstMinute (string, required) - 
+ LastMinute (string, required) - 
+ LongTerm (string, required) -